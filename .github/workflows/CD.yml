name: CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NUGETTOKEN: ${{ secrets.NUGET_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCRIPTS_BASE_URL: https://raw.githubusercontent.com/linksplatform/Scripts/master/MultiProjectRepository

jobs:
  get_changed_files:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.changes.outputs.CHANGED_FILES }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Get changed cs files
        id: changes
        run: |
          changed_files=$(git diff-tree --no-commit-id --name-only -r ${GITHUB_SHA});
          echo "::set-output name=CHANGED_FILES::$changed_cs_files"
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Test
        run: dotnet test -c Release -f net6
  deploy:
    runs-on: ubuntu-latest
    needs: get_changed_files
    if: github.event_name == 'push' && ${{needs.get_changed_files.outputs.changed_files || grep "*.cs"}}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Test
        run: dotnet test -c Release -f net6
      - name: Generate PDF with CSharp code
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/format-csharp-files.py"
          wget "$SCRIPTS_BASE_URL/format-csharp-document.sh"
          wget "$SCRIPTS_BASE_URL/generate-csharp-pdf.sh"
          bash ./generate-csharp-pdf.sh
      - name: Publish CSharp documentation to gh-pages branch
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/docfx.json"
          wget "$SCRIPTS_BASE_URL/filter.yml"
          wget "$SCRIPTS_BASE_URL/toc.yml"
          wget "$SCRIPTS_BASE_URL/publish-csharp-docs.sh"
          bash ./publish-csharp-docs.sh
      - name: Read CSharp project information
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/read_csharp_package_info.sh"
          bash ./read_csharp_package_info.sh
      - name: Publish CSharp NuGet package
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/push-csharp-nuget.sh"
          bash ./push-csharp-nuget.sh
      - name: Publish release
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/publish-release.sh"
          bash ./publish-release.sh
  pushCSharpNuGetToGitHubPackageRegistry:
    needs: [test, deploy]
    if: github.event_name == 'push'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: nuget/setup-nuget@v1
      - name: Publish CSharp NuGet to GitHub Package Registry
        run: |
          dotnet build -c Release
          dotnet pack -c Release
          nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/linksplatform/index.json" -UserName linksplatform -Password ${{ secrets.GITHUB_TOKEN }}
          nuget push **/*.nupkg -Source "GitHub" -SkipDuplicate
