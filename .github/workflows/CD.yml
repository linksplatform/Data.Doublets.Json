name: CD

on:
  push:
    branches: main

env:
  NUGETTOKEN: ${{ secrets.NUGET_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCRIPTS_BASE_URL: https://raw.githubusercontent.com/linksplatform/Scripts/master/MultiProjectRepository

jobs:
  findCppCMakeLists:
    runs-on: ubuntu-latest
    outputs:
      isCppCmakeListsFound: ${{steps.findCppCmakeLists.outputs.isCppCmakeListsFound}}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Find CMakeLists in cpp folder
        id: findCppCmakeLists
        run: |
          foundFile=$(find -type f -name "CMakeLists.txt")
          if [[ $foundFile=="" ]]
          then
            echo "CMakeLists is found"
            echo "::set-output name=isCppCmakeListsFound::true"
          else
            echo "CMakeLists is not found"
            echo "::set-output name=isCppCmakeListsFound::false"
          fi
  testCpp:
    runs-on: ubuntu-latest
    needs: findCppCMakeLists
    if: needs.findCppCMakeLists.outputs.isCppCmakeListsFound == 'true'
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Install conan
        run: pip install conan
      - name: Setup conan
        run: |
          conan profile new linksplatform --detect
          conan profile update settings.compiler=clang linksplatform
          conan profile update settings.compiler.version=13 linksplatform
          conan profile update settings.compiler.libcxx=libstdc++11 linksplatform
          conan profile update env.CXX=clang++ linksplatform
          conan profile show linksplatform
      - name: Instll conan packages
        run: |
          git clone https://github.com/linksplatform/conan-center-index
          cd conan-center-index && git checkout only-development && cd recipes
          conan create platform.converters/all platform.converters/0.1.0@ -pr=linksplatform
          conan create platform.interfaces/all platform.interfaces/0.2.5@ -pr=linksplatform
          conan create platform.ranges/all platform.ranges/0.1.3@ -pr=linksplatform
          conan create platform.random/all platform.random/0.1.0@ -pr=linksplatform
          conan create platform.collections/all platform.collections/0.1.0@ -pr=linksplatform
          conan create platform.collections.methods/all platform.collections.methods/0.1.0@ -pr=linksplatform
          conan create platform.data/all platform.data/0.1.0@ -pr=linksplatform
          conan create platform.memory/all platform.memory/0.1.0@ -pr=linksplatform
          conan create platform.threading/all platform.threading/0.1.0@ -pr=linksplatform
          conan create platform.setters/all platform.setters/0.0.1@ -pr=linksplatform
      - name: Test C++ and scan-build
        run: |
          $CXX=clang++
          $cmake_flags="-DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ -DLINKS_PLATFORM_TESTS=TRUE"
          $cmake_build_dir="build"
          cd cpp && mkdir $cmake_build_dir && cd $cmake_build_dir
          conan install $pwd/.. -pr=linksplatform --build=missing
          cmake .. $cmake_flags
          cmake --build .
          ls
  findCsproj:
    runs-on: ubuntu-latest
    outputs:
      isCsprojFound: ${{steps.findCsproj.outputs.isCsprojFound}}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Find csproj in cs folder
        id: findCsproj
        run: |
          csproj=$(find -type f -name "*.csproj")
          if [[ $csproj!="" ]]
          then
            echo "csproj is found"
            echo "::set-output name=isCsprojFound::true"
          else
            echo "csproj is not found"
            echo "::set-output name=isCsprojFound::false"
          fi
  testCs:
    runs-on: ubuntu-latest
    needs: findCsproj
    if: needs.findCsproj.outputs.isCsprojFound == 'true'
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: Test C#
        run: |
          dotnet test -c Release -f net6
  deploy:
    runs-on: ubuntu-latest
    needs: [testCpp, testCs]
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Read Cpp package information
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/read_cpp_package_info.sh"
        bash ./read_cpp_package_info.sh
    - name: Publish Cpp NuGet package
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-cpp-nuget.sh"
        bash ./push-cpp-nuget.sh
    - name: Read CSharp project information
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/read_csharp_package_info.sh"
        bash ./read_csharp_package_info.sh
    - name: Publish CSharp NuGet package
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-csharp-nuget.sh"
        bash ./push-csharp-nuget.sh
    - name: Publish release
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/publish-release.sh"
        bash ./publish-release.sh
  pushCSharpNuGetToGitHubPackageRegistry:
    needs: [findChangedCsFiles, deploy]
    if: github.event_name == 'push'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: nuget/setup-nuget@v1
      - name: Publish CSharp NuGet to GitHub Package Registry
        run: |
          dotnet build -c Release
          dotnet pack -c Release
          nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/linksplatform/index.json" -UserName linksplatform -Password ${{ secrets.GITHUB_TOKEN }}
          nuget push **/*.nupkg -Source "GitHub" -SkipDuplicate
  findChangedCsFiles:
    runs-on: ubuntu-latest
    needs: [testCpp, testCs]
    outputs:
      IS_CSHARP_FILES_CHANGED: steps.check_if_csharp_files_changed.isCsharpFilesChanged
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Check if Csharp files are changed
      uses: tj-actions/verify-changed-files@v5.5
      id: checkIfCsharpFilesChanged
      with:
        files: |
           Dockerfile
      if: github.event_name == 'push'
  generatePdfWithCsharpCode:
    runs-on: ubuntu-latest
    needs: [findChangedCsFiles, testCs]
    if: true == needs.findChangedCsFiles.outputs.filesChanged
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Generate PDF with CSharp code
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/format-csharp-files.py"
        wget "$SCRIPTS_BASE_URL/format-csharp-document.sh"
        wget "$SCRIPTS_BASE_URL/generate-csharp-pdf.sh"
        bash ./generate-csharp-pdf.sh
  publishCsDocumentation:
    runs-on: ubuntu-latest
    needs: [findChangedCsFiles, testCs]
    if: true == needs.findChangedCsFiles.outputs.filesChanged
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Publish CSharp documentation to gh-pages branch
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/docfx.json"
        wget "$SCRIPTS_BASE_URL/filter.yml"
        wget "$SCRIPTS_BASE_URL/toc.yml"
        wget "$SCRIPTS_BASE_URL/publish-csharp-docs.sh"
        bash ./publish-csharp-docs.sh
